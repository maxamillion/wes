[project]
name = "wes"
version = "1.0.0"
description = "Wes - Cross-platform desktop application for automated executive summary generation"
authors = [
    {name = "Engineering Team", email = "engineering@company.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["wes", "executive", "summary", "jira", "gemini", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # GUI Framework
    "PySide6>=6.6.0",
    # HTTP and API clients
    "requests>=2.31.0",
    "httpx>=0.25.0",
    # Security and encryption
    "cryptography>=41.0.0",
    "keyring>=24.0.0",
    # Configuration and data handling
    "pydantic>=2.5.0",
    "toml>=0.10.2",
    "python-dotenv>=1.0.0",
    # Jira API
    "jira>=3.5.0",
    "atlassian-python-api>=3.41.0",
    # AI/ML
    "google-generativeai>=0.3.0",
    # Date/time handling
    "python-dateutil>=2.8.0",
    # Logging and monitoring
    "structlog>=23.2.0",
    # Data validation
    "validators>=0.22.0",
    # Async support
    "asyncio>=3.4.3",
    "aiohttp>=3.9.0",
    # PDF generation
    "reportlab>=4.0.0",
    "pyinstaller>=6.14.2",
    "pytest>=8.4.1",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    
    # Code quality
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    
    # Security
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.50.0",
    
    # Documentation
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    
    # Build tools
    "pyinstaller>=6.2.0",
    "cx_Freeze>=6.15.0",
    
    # Development utilities
    "pre-commit>=3.6.0",
    "tox>=4.11.0",
]

security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.50.0",
]

build = [
    "pyinstaller>=6.2.0",
    "cx_Freeze>=6.15.0",
]

redhat = [
    # Red Hat Jira integration - optional dependency for Red Hat environments
    "rhjira @ git+https://gitlab.com/prarit/rhjira-python.git",
]

[project.urls]
Homepage = "https://github.com/company/wes"
Documentation = "https://docs.company.com/wes"
Repository = "https://github.com/company/wes"
Issues = "https://github.com/company/wes/issues"

[project.scripts]
wes = "wes.main:main"

[project.gui-scripts]
wes-gui = "wes.main:main"

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/wes"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/scripts",
    "/Makefile",
    "/README.md",
    "/LICENSE",
]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--cov=src/wes",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=50",
    "--strict-markers",
    "--disable-warnings",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as asyncio tests",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/dist/*",
    "*/build/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Code formatting
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# Type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "jira.*",
    "atlassian.*",
    "google.*",
    "PySide6.*",
    "rhjira.*",
]
ignore_missing_imports = true

# Security scanning
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Linting
[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0111",  # missing-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-branches = 15
max-statements = 50

# Security and dependency management
[tool.safety]
ignore = []
full_report = true

[tool.semgrep]
config = "auto"
exclude = [
    "tests/",
    "build/",
    "dist/",
    ".git/",
    ".mypy_cache/",
    ".pytest_cache/",
    "__pycache__/",
]

[dependency-groups]
dev = [
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-qt>=4.5.0",
    "vulture>=2.14",
]
