name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        make install-dev

    - name: Install Red Hat Jira dependencies (optional)
      run: |
        uv sync --extra redhat || echo "Red Hat dependencies not available, continuing with standard tests"
      continue-on-error: true

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1 \
          libglib2.0-0 \
          libegl1 \
          libxcb-cursor0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libxkbcommon-x11-0 \
          libdbus-1-3

    - name: Run linting
      run: |
        make lint

    # - name: Run type checking
    #   run: |
    #     make typecheck

    - name: Setup headless testing environment
      run: |
        # Use Qt's offscreen platform instead of Xvfb for better performance
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "QT_LOGGING_RULES=*.debug=false;qt.qpa.xcb=false" >> $GITHUB_ENV
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Run unit tests
      run: |
        make test-unit
      env:
        RHJIRA_TEST_MODE: "true"

    - name: Run integration tests  
      run: |
        make test-integration
      env:
        QT_QPA_PLATFORM: "offscreen"
        QT_LOGGING_RULES: "*.debug=false;qt.qpa.xcb=false"
        RHJIRA_TEST_MODE: "true"

    - name: Run security tests
      run: |
        if [ -d "tests/security" ] && [ "$(ls -A tests/security/*.py 2>/dev/null)" ]; then
          make test-security
        else
          echo "No security tests found, skipping"
        fi
      env:
        QT_QPA_PLATFORM: "offscreen"
        QT_LOGGING_RULES: "*.debug=false;qt.qpa.xcb=false"
        RHJIRA_TEST_MODE: "true"

    - name: Run Red Hat Jira tests
      run: |
        uv run --extra dev pytest tests/unit/test_redhat_jira_client.py \
          -m "not integration" \
          --junitxml=test-results-redhat.xml
      env:
        QT_QPA_PLATFORM: "offscreen"
        QT_LOGGING_RULES: "*.debug=false;qt.qpa.xcb=false"
        RHJIRA_TEST_MODE: "true"
      continue-on-error: true

    - name: Run security scanning
      run: |
        make security-scan || true

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results-*.xml
          bandit-report.json
          safety-report.json
          htmlcov/

  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install build dependencies
      run: |
        make install-dev
        uv sync --extra build

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1 \
          libglib2.0-0 \
          libegl1 \
          libxcb-cursor0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libxkbcommon-x11-0 \
          libdbus-1-3

    - name: Test Linux build
      if: runner.os == 'Linux'
      run: make build-linux

    - name: Test Windows build  
      if: runner.os == 'Windows'
      run: make build-windows

    - name: Test macOS build
      if: runner.os == 'macOS'
      run: make build-macos

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executable-${{ matrix.os }}
        path: |
          dist/
        retention-days: 7
