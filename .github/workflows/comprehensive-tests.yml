name: Comprehensive Tests

on:
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/e2e/**'
      - 'pyproject.toml'
      - 'Makefile'

jobs:
  comprehensive-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        make install-dev

    - name: Install Red Hat Jira dependencies
      run: |
        uv sync --extra redhat || echo "Red Hat dependencies not available, continuing with standard tests"
      continue-on-error: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1 \
          libglib2.0-0 \
          libegl1 \
          libxcb-cursor0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libxkbcommon-x11-0 \
          libdbus-1-3

    - name: Setup headless testing environment
      run: |
        # Use Qt's offscreen platform instead of Xvfb for better performance
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "QT_LOGGING_RULES=*.debug=false;qt.qpa.xcb=false" >> $GITHUB_ENV
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Run all tests with coverage
      run: |
        make coverage
      env:
        RHJIRA_TEST_MODE: "true"

    - name: Run end-to-end tests
      run: |
        if [ -d "tests/e2e" ] && [ "$(ls -A tests/e2e/*.py 2>/dev/null)" ]; then
          make test-e2e VERBOSE=true
        else
          echo "No e2e tests found, skipping"
        fi
      env:
        RHJIRA_TEST_MODE: "true"

    - name: Run comprehensive Red Hat Jira tests
      run: |
        echo "Running Red Hat Jira integration tests..."
        uv run --extra dev pytest tests/unit/test_redhat_jira_client.py \
          --junitxml=test-results-redhat-comprehensive.xml \
          -v
      env:
        QT_QPA_PLATFORM: "offscreen"
        QT_LOGGING_RULES: "*.debug=false;qt.qpa.xcb=false"
        RHJIRA_TEST_MODE: "true"
        RHJIRA_COMPREHENSIVE_TEST: "true"
      continue-on-error: true

    - name: Run comprehensive security scanning
      run: |
        make security-scan || true
        
        # Also install and run semgrep if not included in make target
        if ! command -v semgrep &> /dev/null; then
          python -m pip install semgrep || true
        fi

    - name: Generate coverage report
      run: |
        # Coverage report already generated by make coverage
        echo "Coverage report generated in htmlcov/"

    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-results
        path: |
          test-results-*.xml
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json
          semgrep-report.json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: comprehensive
        name: codecov-comprehensive
        fail_ci_if_error: false

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üß™ Comprehensive Test Results\n\n';
          
          // Add coverage info if available
          try {
            const coverage = fs.readFileSync('coverage.xml', 'utf8');
            const match = coverage.match(/line-rate="([^"]+)"/);
            if (match) {
              const coveragePercent = (parseFloat(match[1]) * 100).toFixed(1);
              comment += `üìä **Code Coverage:** ${coveragePercent}%\n\n`;
            }
          } catch (e) {
            console.log('Could not read coverage info');
          }
          
          // Add security scan results
          try {
            const bandit = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            comment += `üîí **Security Issues Found:** ${bandit.results.length}\n`;
          } catch (e) {
            comment += `üîí **Security Scan:** Completed\n`;
          }
          
          try {
            const safety = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            comment += `üõ°Ô∏è **Dependency Vulnerabilities:** ${safety.length || 0}\n`;
          } catch (e) {
            comment += `üõ°Ô∏è **Dependency Scan:** Completed\n`;
          }
          
          comment += '\n‚úÖ All comprehensive tests completed successfully!';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        make install-dev
        uv sync --extra build
        uv sync --extra redhat || echo "Red Hat dependencies not available for build"
      continue-on-error: true

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1 \
          libglib2.0-0 \
          libegl1 \
          libxcb-cursor0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libxkbcommon-x11-0 \
          libdbus-1-3

    - name: Build executable
      run: |
        case "${{ runner.os }}" in
          "Linux")
            make build-linux
            ;;
          "Windows")
            make build-windows
            ;;
          "macOS")
            make build-macos
            ;;
        esac

    - name: Test executable
      run: |
        case "${{ runner.os }}" in
          "Linux")
            ./dist/linux/wes-linux-1.0.0 --version
            ;;
          "Windows")
            ./dist/windows/wes-windows-1.0.0.exe --version
            ;;
          "macOS")
            ./dist/macos/wes-macos-1.0.0 --version
            ;;
        esac
      env:
        QT_QPA_PLATFORM: "offscreen"
        QT_LOGGING_RULES: "*.debug=false;qt.qpa.xcb=false"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executable-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/
        retention-days: 30
